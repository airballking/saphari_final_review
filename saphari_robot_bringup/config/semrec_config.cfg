# This is a config file for the Semantic Hierarchy Recorder high level
# plan logging tool. All configuration information that might be
# important for the operation of the tool can be specified here.
#
# When dealing with paths, the following tokens can be used (they will
# be automatically replaced by their respective content in the current
# context):
#
#  * $HOME or ${HOME}
#    Replaced by the current user's home directory.
#    Example: $HOME for user "jan" becomes "/home/jan/"
#
#  * $WORKSPACE or ${WORKSPACE}
#    Replaced by the current user's active ROS workspace directory
#
#  * ${PACKAGE pkg}
#    Replaced by the global ROS path of the package named `pkg'

persistent-data-storage: {
  # This is where physical experimental data is stored (e.g. images
  # taken) and where exported files are written to (OWL files, PDFs,
  # SVGs, ...)
  base-data-directory = "$HOME/sr_experimental_data";

  # The logged data can be written to a MongoDB live. This information
  # defines the connection details.
  use-mongodb = true;
  mongodb: {
    host = "localhost";
    port = 27017;
    database = "semrec";
  };
};

experiment-data: {
  # The experiment name mask *must* include either the `%d' escape
  # sequence for automatic numbering, or the `%s' escape sequence for
  # date assertion (and not both). This way, the experiment will be
  # labelled automatically and will not overwrite old data from other
  # experiments. When using the date placeholder, it will be replaced
  # by the current date in the format `YYYY-MM-DD_HH-MM-SS'.
  experiment-name-mask = "exp-%s";
  symlink-name = "current-experiment";
};

plugins: {
  failed-plugins-invalidate-startup = true;

  load-development-plugins = true;
  search-paths = ["$WORKSPACE/devel/lib/", "${PACKAGE semrec}/lib/", "${PACKAGE sr_plugin_knowrob}/lib/"];

  # Not all of these are actually necessary here, as they depend on
  # each other (resulting in automatic loading)
  load = ["symboliclog", "ros", "dotexporter", "owlexporter", "supervisor", "experiment_context", "imagecapturer", "knowrob"];#, "prediction"];
  
  # These color codes are used in series for coloring the output
  # messages on the console. If more output entities are present than
  # colors in this list, the colors wrap around.
  colors = ["31", "32", "33", "34", "35", "36", "37"];
  
  # Individual plugin configurations consist of groups of settings
  # that hold the "plugin" field in its top-level group. In order to
  # configure the plugin "ros" with the node-name "semrec_ros",
  # one would configure it this way:
  #
  # individual-configurations = (
  #   { plugin = "ros";
  #     node-name = "semrec_ros"; }
  # );
  individual-configurations = (
    { plugin = "owlexporter";
      semantics-descriptor-file = "${PACKAGE semrec}/data/semantics_descriptor_files/cram_knowrob_pickandplace.cfg"; },
    { plugin = "dotexporter";
      create-sequential-files = false; },
    { plugin = "ros";
      node-name = "semrec_ros";
      async-threads = 1;
      roslog-messages = true;
      roslog-topic = "/rosout";
      arbitrary-mappings-file = "${PACKAGE semrec}/data/arbitrary_mappings_files/ros_signals.cfg"; },
    { plugin = "knowrob";
      json-service = "/json_prolog";
      connection-less = false;
      wait-for-service-duration = -1;
      semantics-descriptor-file = "${PACKAGE semrec}/data/semantics_descriptor_files/cram_knowrob_pickandplace.cfg"; },
    { plugin = "supervisor";
      knowrob-symlink-path = "${PACKAGE ias_knowledge_base}/owl/knowrob.owl";
      cleanup-directory = true;
      # If no files of any given extension in the parameter
      # `experiment-validation-extensions` are present in the
      # experiment folder when a new experiment is started, the old
      # folder gets deleted. This is a measure to prevent empty
      # directories when restarting experiments often.
      experiment-validation-extensions = ["owl"]; },
    { plugin = "symboliclog";
      time-precision = 3; },
    { plugin = "imagecapturer";
      timeout = 5.0;
      image-publishing-topic = "/logged_images"; }
  );
};

miscellaneous: {
  display-unhandled-events = false;
  display-unhandled-service-events = false;
  display-configuration-details = true;
  # Only display important information: Only information about package
  # infrastructure, setup, plugin loading, and messages marked as
  # important by plugins are shown on the console. All other messages
  # (such as regular logging messages by the symbolic log plugin) are
  # suppressed. When the first `non-important` logging message is
  # received, a single notice is printed on the console, denoting that
  # logging has now started.
  only-display-important-messages = false;
  
  # If set to false, all default command line output is
  # suppressed. Plugins can still output data on the command line if
  # wanted. A use-case for this is the `console` plugin that created
  # an ncurses-based interface and displays the text normally printed
  # on the command line onto its own text canvas. This is virtually
  # the same as `quiet mode`.
  command-line-output = true;
};
